name: "example-classif-infer"
bypass_queries: true
datasets:
  example:
    type: "thelper.data.geo.parsers.SlidingWindowDataset"
    params:
      raster_path: "data/example/S2A_MSIL1C_20170608T161031_N0205_R097_T18TVR_20170608T161030.SAFE/MTD_MSIL1C.xml"
      raster_bands: [2, 3, 4]
      patch_size: 7
      #batch_size: 256  # auto-found by loader (?)
      #num_workers: 4   # moved to loaders.workers
      #use_gpu: true    # auto-found by available devices
      #normalize_loss: true     # moved to runner
      #raster_inputs:
      #- path: S2A_MSIL1C_20170608T161031_N0205_R097_T18TVR_20170608T161030.SAFE/MTD_MSIL1C.xml
loaders:
  type: "thelper.data.geo.infer.SlidingWindowInferenceLoader"
  workers: 4
  shuffle: false
  # setting required to avoid assertion error with batch-size = 0
  # adjust according to available processing memory and workers of your machine or server
  batch_size: 1
  base_transforms:
    - operation: thelper.transforms.NormalizeZeroMeanUnitVar
      params:
        mean: [913.294, 634.823, 2750.945]
        std: [229.093, 384.313, 1016.149]
      target_key: image
    - operation: torchvision.transforms.ToTensor
      target_key: image
  collate_fn:
    type: thelper.data.loaders.default_collate
    params:
      force_tensor: false
  # The next section could normally be omitted, which will automatically ensure that thelper tests all images that
  # could be found with the data loaders, and this for every defined dataset in the 'datasets' section.
  # We can also define here to complete execution quickly with a very small subset for demonstration (or debug purpose).
  # Normally it should always result to a full 'split' (ratio = 1) so that all data gets tested, unless you want to
  # combine the same configuration file for running both training and inference operations.
  test_split:
    example: 1
# with this section, we define the metrics that will be used by the 'runner/tester' (aka. 'trainer' when doing training)
# this is basically the prediction outputs that the model will produce during inference
runner:
  type: "thelper.data.geo.infer.SlidingWindowTester"
  normalize_loss: true
  #metrics:
  #  output:
  #    type: "thelper.data.geo.ogc.TB15D104DetectLogger"
# details about the model
model:
  ckpt_path: "data/example/ckpt.best.pth"
  params:
    pretrained: true
